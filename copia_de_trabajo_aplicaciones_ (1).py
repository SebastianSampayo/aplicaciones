# -*- coding: utf-8 -*-
"""Copia de trabajo aplicaciones .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GqNetJjStpMyb34KdUQuInIDsbu4XIz9

# Plantillas desde SXS
Primero instalamos la libreria sxs `!pip install sxs -q`
"""

!pip install sxs -q

# Commented out IPython magic to ensure Python compatibility.
import sxs # import sxs
import matplotlib.pyplot as plt
import numpy as np
# %config InlineBackend.figure_format = 'retina'

sxs_bhns_0001 = sxs.load("SXS:BHNS:0001")
w = sxs_bhns_0001.h

"""`w.metadata` los datos de los datos"""

print('tipo de objetos: '+w.metadata.object_types)

t0 = w.metadata.reference_time # tiempo de referencia, al inicio hay "junk radiation"
print(f't0 = {t0}')

w.data # todos los multipolos

ell, m = 2 , 2 # seleccionar el multipolo
i22 = w.index(ell, m) # seleccionar el indice del multipolo correspondiente
print(i22)
# guardar la onda 2 2 en w_2_2
w_2_2 = w[:, i22]

plt.figure()
plt.plot(w.t, np.real(w_2_2))
plt.plot(w.t, np.imag(w_2_2))
plt.xlabel(r'$t$')
plt.ylabel(r'$h_{22}$')
plt.show()

phi = np.angle(w_2_2)
fphy=np.unwrap(-phi)

plt.plot(w_2_2.t, fphy)
#plt.scatter(w_2_2.t, fphy)
plt.xlabel(r'$t/M$')
plt.ylabel(r'$\varphi$')
#plt.xlim(3500,)
#plt.ylim(200,)
plt.show()

from re import T
from scipy.signal import find_peaks
w_2_2.t
fphy

#sin ruido
x_sr = w_2_2.t[300:19558:]
y_sr = fphy[300:19558:]


#Interpolación lagrange
x_new_La = w_2_2.t[300:19558:1900][:11]
y_new_La = fphy[300:19558:1900][:11]

#Interpolación
x_new = w_2_2.t[300:19558:19][: 1014]
y_new = fphy[300:19558:19][:1014]

#Comprobar el error
x_test = w_2_2.t[300:19558:38][:506]
y_test = fphy[300:19558:38][:506]

x_test1 = 0.5*(x_new[:-1] + x_new[1:])   # puntos medios
x_test1 = np.append(x_test1, x_new[-1])
y_test1 = fphy[np.searchsorted(w_2_2.t, x_test1)]  # valores de fphy en esos puntos

print("Entrenamiento:", x_new.shape)
print("Test:", x_test1.shape)
#print(x_new)
print(x_new.shape)
#print(y_new)
print(y_new.shape)
print(x_test.shape)
print(y_test.shape)
print(w_2_2.T.shape)

peaks, _ = find_peaks(fphy)

print("Índices de máximos relativos:", peaks)
print("Valores de máximos relativos:", fphy[peaks])

plt.plot(x_sr, y_sr)
#plt.scatter(x_new_La, y_new_La)
#plt.scatter(x_new, y_new)
#plt.scatter(x_test, y_test)
plt.xlabel(r'$t/M$')
#plt.xlim(3500,)
#plt.ylim(200,)
plt.ylabel(r'$\varphi$')
plt.show()

#plt.plot(w_2_2.t, -phi)
plt.scatter(x_new, y_new)
plt.scatter(x_test1, y_test1)
plt.xlabel(r'$t/M$')
#plt.xlim(3500,)
#plt.ylim(200,)
plt.ylabel(r'$\varphi$')
plt.show()

from scipy.interpolate import lagrange, CubicSpline, PchipInterpolator

poly_lagrange = lagrange(x_new_La, y_new_La)

plt.plot(x_sr, poly_lagrange(x_sr), ':', label='Scipy Lagrange')
plt.scatter(x_new_La, y_new_La, color='r', label='Datos')
plt.legend()
plt.xlabel(r'$t/M$')
plt.ylabel(r'$\varphi$')
plt.show()

spline = CubicSpline(x_new, y_new, bc_type='natural')
mag_interp_spline = spline(x_new)

plt.scatter(x_new, y_new, color='r', label='Datos')
plt.plot(x_new, mag_interp_spline, '-', label='Cubic Spline')
plt.title('Cubic Spline')
plt.xlabel(r'$t/M$')
plt.ylabel(r'$\varphi$')
plt.legend()
plt.show()

pchip=PchipInterpolator(x_new, y_new)


plt.scatter(x_new, y_new, color='r', label='Datos')
plt.plot(x_new, pchip(x_new), '-', label='pchip')
plt.title('pchip')
plt.xlabel(r'$t/M$')
plt.ylabel(r'$\varphi$')
plt.legend()
plt.show()

plt.plot(x_new, mag_interp_spline, '--', label='Cubic Spline')
plt.plot(x_new, pchip(x_new), ':', label='pchip')
plt.title('Comparación de Spline Cúbico y PCHIP')
plt.legend()
plt.show()

from scipy.interpolate import interp1d

f_cubic = interp1d(x_new, y_new, kind='cubic')
mag_interp_cubic = f_cubic(x_new)

plt.plot(x_new, mag_interp_cubic, label='Cubic interp1d')
plt.title('Cubic interp1d')
plt.xlabel(r'$t/M$')
plt.ylabel(r'$\varphi$')
plt.legend()
plt.show()

#plt.scatter(x_new, y_new, color='r', label='Datos')
plt.plot(x_new, mag_interp_cubic, '-', label='Cubic interp1d')
plt.plot(x_new, mag_interp_spline, '--', label='Cubic Spline')
plt.plot(x_new_La, poly_lagrange(x_new_La), '-', label='Scipy Lagrange')
plt.plot(x_new, pchip(x_new), '--', label='pchip')
plt.xlabel(r'$t/M$')
plt.ylabel(r'$\varphi$')
#plt.xlim([1112,1113])
#plt.ylim([57.3,57.7])
plt.title('Comparacion')
plt.legend()
plt.show()

#  valores de y_test
y_test_lagrange = poly_lagrange(x_test1)
y_test_spline = spline(x_test1)
y_test_cubic = f_cubic(x_test1)
y_test_pchip = pchip(x_test1)

# calcular el error cuadratico

SE_lagrange = (y_test1 - y_test_lagrange)**2
SE_CS = (y_test1 - y_test_spline)**2
SE_cubic = (y_test1 - y_test_cubic)**2
SE_pchip = (y_test1 - y_test_pchip)**2

SE1_lagrange = (y_new - y_test_lagrange)**2
SE1_CS = (y_new - y_test_spline)**2
SE1_cubic = (y_new - y_test_cubic)**2
SE1_pchip = (y_new - y_test_pchip)**2


# mean square error
MSE_lagrange = SE_lagrange.mean()
MSE_CS = SE_CS.mean()
MSE_cubic = SE_cubic.mean()
MSE_pchip = SE_pchip.mean()

print(f"MSE lagrange {MSE_lagrange:.10f}")
print(f"MSE spline {MSE_CS:.10f}")
print(f"MSE Cubic {MSE_cubic:.10f}")
print(f"MSE pchip {MSE_pchip:.10f}")

# Error absoluto
AE_lagrange = np.abs(y_test1 - y_test_lagrange)
AE_CS = np.abs(y_test1 - y_test_spline)
AE_cubic = np.abs(y_test1 - y_test_cubic)
AE_pchip = np.abs(y_test1 - y_test_pchip)

AE1_lagrange = np.abs(y_new - y_test_lagrange)
AE1_CS = np.abs(y_new - y_test_spline)
AE1_cubic = np.abs(y_new - y_test_cubic)
AE1_pchip = np.abs(y_new - y_test_pchip)


# Error absoluto medio
MAE_lagrange = AE_lagrange.mean()
MAE_CS = AE_CS.mean()
MAE_cubic = AE_cubic.mean()
MAE_pchip = AE_pchip.mean()

print(f"MAE lagrange {MAE_lagrange:.10f}")
print(f"MAE spline {MAE_CS:.10f}")
print(f"MAE Cubic {MAE_cubic:.10f}")
print(f"MAE pchip {MAE_pchip:.10f}")

plt.figure(figsize=(12,5))

# Error absoluto
plt.subplot(1,2,1)
plt.plot(x_test1, SE_lagrange, label="SE lagrange")
plt.plot(x_test1, SE_CS, label="SE spline2", linestyle= "-", marker = "o")
plt.plot(x_test1, SE_cubic, label="SE Cubic", linestyle= "--", marker = "s")
plt.plot(x_test1, SE_pchip, label="SE pchip", linestyle= ":", marker = "^")
plt.title("Error absoluto")
plt.xlabel(r'$t/M$')
plt.ylabel("Error Absoluto")
plt.legend()
plt.grid(True)

# Error cuadrático
plt.subplot(1,2,2)
plt.plot(x_test1, AE_lagrange, label="AE lagrange")

plt.plot(x_test1, AE_CS, label="AE spline", linestyle= "-", marker = "o")
plt.plot(x_test1, AE_cubic, label="AE Cubic", linestyle= "--", marker = "s")
plt.plot(x_test1, AE_pchip, label="AE pchip", linestyle= ":", marker = "^")
plt.title("Error cuadrático")
plt.xlabel(r'$t/M$')
plt.ylabel("Error cuadrático")
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()



